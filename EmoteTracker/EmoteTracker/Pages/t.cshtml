@page "{channel?}"
@model EmoteTracker.Pages.TwitchChannelModel

<h1>@Html.DisplayFor(m => m.TwitchChannel.DisplayName)'s emotes</h1>

<p class="lead">Summary of the chat emotes from different extensions enabled in the channel.</p>

<p>Website maintained with ♥ by <a href="https://febog.com">febog</a>. Source can be found on <a href="https://github.com/febog/emote-tracker">GitHub</a>.</p>

<search>
    <form class="row row-cols-lg-auto g-3 align-items-center">
        <div class="col-12">
            <label for="table-search-input">Search:</label>
        </div>
        <div class="col-12 flex-grow-1">
            <input type="text" class="form-control" id="table-search-input" placeholder="Filter the table..."
                   onkeyup="filterTable()">
        </div>
    </form>
</search>

<table class="table" id="emote-table">
    <caption>Showing <span id="visible-emote-count">@Html.DisplayFor(model => model.ChannelEmotes.Count)</span> emotes of @Html.DisplayFor(model => model.ChannelEmotes.Count).</caption>
    <thead>
        <tr>
            <th>Emote</th>
            <th>
                @Html.DisplayNameFor(model => model.ChannelEmotes[0].CanonicalName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ChannelEmotes[0].Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ChannelEmotes[0].EmoteType)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var emote in Model.ChannelEmotes)
        {
            <tr>
                <td class="align-middle" style="width: 1px">
                    <img loading="lazy"
                         width="@emote.Width"
                         height="@emote.Height"
                         src="@emote.ImageUrl"
                         alt="@emote.CanonicalName emote in @Html.DisplayFor(modelItem => emote.EmoteType)"
                         title="@emote.CanonicalName emote in @Html.DisplayFor(modelItem => emote.EmoteType)" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => emote.CanonicalName)
                </td>
                <td>
                    <a href="@emote.EmotePage" target="_blank" rel="noopener noreferrer"
                       title="Go to @emote.CanonicalName emote page in @Html.DisplayFor(modelItem => emote.EmoteType)">@Html.DisplayFor(modelItem => emote.Id)</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => emote.EmoteType)
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        function filterTable() {
          const searchInput = document.getElementById("table-search-input");
          const searchString = searchInput.value.toLowerCase();
          const searchTerms = searchString.replace(/\s+/g, " ").trim().split(" ");
          const table = document.getElementById("emote-table");
          const rows = table.getElementsByTagName("tr");
          let visibleRows = 0;
          // Start search on all rows from second row onwards, to skip headers
          for (let i = 1; i < rows.length; i++) {
            const row = rows[i];
            const rowCells = row.getElementsByTagName("td");
            const cellsText = [];
            // Extract text from cells
            for (let j = 0; j < rowCells.length; j++) {
              const dataCell = rowCells[j];
              if (dataCell) {
                cellsText.push(dataCell.textContent);
              }
            }
            const rowText = cellsText.join(" ");
            // Search for each filter term
            if (textContainsEveryTerm(rowText, searchTerms)) {
              row.style.display = "";
              visibleRows++;
            } else {
              row.style.display = "none";
            }
          }
          // Update the shown emotes counter
          const counter = document.getElementById("visible-emote-count");
          counter.textContent = visibleRows;
        }

        function textContainsEveryTerm(text, terms) {
          for (let i = 0; i < terms.length; i++) {
            const term = terms[i];
            if (text.toLowerCase().indexOf(term) < 0) {
              return false;
            }
          }
          return true;
        }
    </script>
}
